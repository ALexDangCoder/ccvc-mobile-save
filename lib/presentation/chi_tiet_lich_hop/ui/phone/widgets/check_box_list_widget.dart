import 'package:ccvc_mobile/config/resources/color.dart';import 'package:ccvc_mobile/config/resources/styles.dart';import 'package:ccvc_mobile/config/themes/app_theme.dart';import 'package:ccvc_mobile/domain/model/lich_hop/chi_tiet_bieu_quyet_model.dart';import 'package:ccvc_mobile/domain/model/lich_hop/danh_sach_nguoi_tham_gia_model.dart';import 'package:ccvc_mobile/ket_noi_module/utils/constants/image_asset.dart';import 'package:ccvc_mobile/presentation/chi_tiet_lich_hop/bloc/chi_tiet_lich_hop_cubit.dart';import 'package:ccvc_mobile/utils/extensions/size_extension.dart';import 'package:ccvc_mobile/widgets/select_only_expands/expand_only_widget.dart';import 'package:ccvc_mobile/widgets/text/no_data_widget.dart';import 'package:flutter/material.dart';import 'package:flutter_svg/flutter_svg.dart';import 'package:rxdart/rxdart.dart';class CheckBoxSuaBieuQuyet extends StatefulWidget {  final bool initExpand;  final String value;  final String title;  final String urlIcon;  final bool isShowValue;  final Widget? customValue;  final List<DanhSachNguoiThamGiaModel> dataNguoiThamGia;  final List<DanhSachThanhPhanThamGiaModel> initData;  final Function(List<DanhSachNguoiThamGiaModel>) onChange;  final DetailMeetCalenderCubit cubit;  const CheckBoxSuaBieuQuyet({    Key? key,    this.initExpand = true,    this.value = '',    this.isShowValue = true,    this.title = '',    required this.urlIcon,    this.customValue,    required this.onChange,    required this.dataNguoiThamGia,    required this.initData,    required this.cubit,  }) : super(key: key);  @override  _ExpandedSectionState createState() => _ExpandedSectionState();}class _ExpandedSectionState extends State<CheckBoxSuaBieuQuyet>    with SingleTickerProviderStateMixin {  final BehaviorSubject<List<int>> selectBloc = BehaviorSubject();  late AnimationController? expandController;  double sizeWitdhTag = 0;  bool checkbox = false;  List<DanhSachNguoiThamGiaModel> valueSelect = [];  List<int> addIndex = [];  @override  void initState() {    super.initState();    expandController = AnimationController(      vsync: this,      duration: const Duration(milliseconds: 300),    );    widget.cubit.listBieuQuyetSubject.listen((value) {      for (var i = 0; i < widget.dataNguoiThamGia.length; i++) {        for (var j = 0; j < value.length; j++) {          if (widget.dataNguoiThamGia[i].id == value[j].id) {            if (valueSelect.contains(widget.dataNguoiThamGia[i]) &&                addIndex.contains(i)) {              break;            } else {              valueSelect.add(widget.dataNguoiThamGia[i]);              addIndex.add(i);              selectBloc.sink.add(addIndex);              widget.onChange(valueSelect);            }          }        }      }      addIndex.toSet().toList();    });  }  @override  Widget build(BuildContext context) {    return ExpandOnlyWidget(      key: UniqueKey(),      initExpand: true,      isShowIcon: false,      initController: expandController,      header: Container(),      child: widget.dataNguoiThamGia.isEmpty          ? const NodataWidget()          : Column(              crossAxisAlignment: CrossAxisAlignment.start,              children: List.generate(                widget.dataNguoiThamGia.length,                (index) => Container(                  decoration: BoxDecoration(                    border: Border(                      bottom: BorderSide(color: borderColor.withOpacity(0.5)),                    ),                  ),                  padding: EdgeInsets.only(                    bottom: 10,                    top: index == 0 ? 0 : 8,                  ),                  child: GestureDetector(                    onTap: () {                      setState(() {});                      if (valueSelect                          .contains(widget.dataNguoiThamGia[index])) {                        valueSelect.remove(widget.dataNguoiThamGia[index]);                      } else {                        valueSelect.add(widget.dataNguoiThamGia[index]);                      }                      if (addIndex.contains(index)) {                        addIndex.remove(index);                        selectBloc.sink.add(addIndex);                      } else {                        addIndex.add(index);                        selectBloc.sink.add(addIndex);                      }                      widget.onChange(valueSelect);                    },                    child: Container(                      key: UniqueKey(),                      color: Colors.transparent,                      padding: const EdgeInsets.symmetric(                        vertical: 5,                      ),                      child: Row(                        children: [                          StreamBuilder<List<int>>(                            stream: selectBloc.stream,                            builder: (context, snapshot) {                              final data = snapshot.data ?? [];                              return data.contains(index)                                  ? Padding(                                      padding: const EdgeInsets.only(                                        right: 4,                                      ),                                      child: Stack(                                        alignment: Alignment.center,                                        children: [                                          SvgPicture.asset(                                            ImageAssets.icCheck,                                            color: AppTheme.getInstance()                                                .colorField(),                                          ),                                          const Icon(                                            Icons.check,                                            size: 15.0,                                            color: backgroundColorApp,                                          ),                                        ],                                      ),                                    )                                  : Padding(                                      padding: const EdgeInsets.only(                                        right: 4,                                      ),                                      child: SvgPicture.asset(                                        ImageAssets.icUnCheck,                                      ),                                    );                            },                          ),                          spaceW10,                          Flexible(                            child: Text(                              plusString(                                widget.dataNguoiThamGia[index].tenCanBo,                                widget.dataNguoiThamGia[index].tenChucVu,                                widget.dataNguoiThamGia[index].tenCoQuan,                              ),                              style: textNormal(color3D5586, 14.0.textScale()),                              overflow: TextOverflow.ellipsis,                            ),                          ),                        ],                      ),                    ),                  ),                ),              ),            ),    );  }  Widget headerWidget() {    return Row(      children: [        Container(          width: 16,          height: 16,          color: Colors.transparent,          child: SvgPicture.asset(            widget.urlIcon,          ),        ),        const SizedBox(          width: 14,        ),        Expanded(          child: AnimatedBuilder(            animation: expandController!,            builder: (context, _) => Container(              padding: const EdgeInsets.symmetric(vertical: 9),              decoration: BoxDecoration(                color: Colors.transparent,                border: Border(                  bottom: BorderSide(                    color: expandController!.value == 0                        ? colorECEEF7                        : Colors.transparent,                  ),                ),              ),              child: Row(                children: [                  Expanded(                    child: widget.customValue ??                        StreamBuilder<List<int>>(                          stream: selectBloc.stream,                          builder: (context, snapshot) {                            return _buildTagView();                          },                        ),                  ),                  if (expandController!.value == 0)                    const Icon(                      Icons.keyboard_arrow_down_outlined,                      color: AqiColor,                    )                  else                    const Icon(                      Icons.keyboard_arrow_up_rounded,                      color: AqiColor,                    )                ],              ),            ),          ),        ),      ],    );  }  Widget _buildTagView() {    return Wrap(      runSpacing: 8,      spacing: 8,      children: _listTag(),    );  }  List<Widget> _listTag() {    final listWidget = <Widget>[];    for (int index = 0; index < valueSelect.length; index++) {      listWidget.add(_buildTagItem(valueSelect[index].tenCanBo ?? '', index));    }    return listWidget;  }  Widget _buildTagItem(String content, int index) {    return Container(      padding: const EdgeInsets.only(bottom: 4, left: 4, right: 4),      decoration: BoxDecoration(        color: bgTabletColor,        borderRadius: BorderRadius.circular(20),        border: Border.all(color: borderColor.withOpacity(0.5)),      ),      child: Row(        mainAxisSize: MainAxisSize.min,        children: [          Text(            content,            style: textDetailHDSD(fontSize: 14, color: textTitle),          ),          GestureDetector(            onTap: () {              setState(() {});              valueSelect.removeAt(index);              addIndex.removeAt(index);              widget.onChange(valueSelect);            },            child: Container(              padding: const EdgeInsets.only(top: 8, right: 8, left: 8),              child: SvgPicture.asset(ImageAssets.icClose),            ),          ),        ],      ),    );  }}